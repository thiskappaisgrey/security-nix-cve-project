
import argparse
import shutil
from pathlib import Path
from gen_nix import get_server_template, generate_nix
import genParser
from scrape_site import get_packagelist


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='Attempt Automatically generate a nix config from an exploit.py')
    parser.add_argument('-e', '--exploit', help='Specify the exploit file', required=True)
    parser.add_argument('-o', '--outdir', help='Specify the output file directory', required=True)
    args = parser.parse_args()
    exploit = Path(args.exploit)
    outdir = args.outdir
    if not exploit.exists():
        print("Exploit file doesn't exist! Can't get metadata")
        exit(1)
    # TODO: Do a bunch of stuff to get the metadata from exploit

    pythonPackages = "requests minio"
    appname = "minio"

    #TODO: Access key and other stuff can't be empty - idk how AI can deal with that..?
    config = "enable = true;listenAddress=\":9000\";\naccessKey=\"minioadmin\";secretKey=\"minioadmin\";"
    
    # The url is from the minio version
    url = "github:NixOS/nixpkgs/34bfa9403e42eece93d1a3740e9d8a02fceafbca"
    template = get_server_template(url, pythonPackages, appname, config)
    
    generate_nix(template, outdir)
    # Assume that outdir exists
    p = Path(outdir) / "exploit.py"
    # exploit.copy2(p)
    p.write_bytes(exploit.read_bytes())

    #WE ADDED STUFF BELOW HERE: grabs name, idealVersion, and dependencies
    exploit = genParser.file_tostring("exploit.py")
    res = genParser.parse_cve(exploit)

    name = res.name
    version = res.version #Obtaining version number
    old_version = version
    dependencies = res.dependencies

    # scraper stuff
    form = "minio"
    URL = "https://lazamar.co.uk/nix-versions/?channel=nixpkgs-unstable&package="+form
    list = get_packagelist(URL)
    idealVersion = getIdealVersion(version, list)
    if old_version == idealVersion:
        print("nix does not support this version: "+old_version)
        exit(0)
    
    print(idealVersion)