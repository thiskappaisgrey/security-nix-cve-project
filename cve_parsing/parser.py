from transformers import pipeline
import re
model_name = "deepset/roberta-large-squad2"
nlp = pipeline('question-answering', model=model_name, tokenizer=model_name)

from dataclasses import dataclass

@dataclass
class Out:
    name: str
    version: list[str]
    dependencies: str

def file_tostring(filepath):
    with open(filepath, 'r') as file:
        file_contents = file.read()

    return file_contents

def ask_question(question, cve):
    QA_input = {
        'question': question,
        'context': cve
    }
    res = nlp(QA_input)
    return res['answer']

def generate_version_message(version_numbers):
    version_string = " and ".join(version_numbers)
    message = f"What version numbers are mentioned other than {version_string}?"
    return message

def get_other_versions(cve,versions):
    question = generate_version_message(versions)
    return ask_question(question, cve)

def get_version(cve):
    question = "What is the version in the exploit code, and where is it located?"
    return ask_question(question, cve)

def get_name(cve):
    question = "What is the name of the app being exploited?"
    return (ask_question(question, cve)).lower()

def parse_cve(cve: str) -> Out:
    name = get_name(cve)
    version = get_version(cve)
    dependencies = get_dependencies(cve)
    return Out(name, version, dependencies)

def get_dependencies(cve: str) -> str:
    question = "What required installs are there before running this code?"
    answer = ask_question(question,cve)
    question = "What are the items it wants me to install?"
    answer = (ask_question(question,cve)).replace(',', ' ')
    return answer

if __name__ == "__main__":
    context1 = "Natus NeuroWorks and SleepWorks before 8.4 GMA3 utilize a default password of xltek for the Microsoft SQL Server service sa account, allowing a threat actor to perform remote code execution, data exfiltration, or other nefarious actions such as tampering with data or destroying/disrupting MSSQL services. "
    context2 = 'Adobe Acrobat Reader versions 23.003.20244 (and earlier) and 20.005.30467 (and earlier) are affected by an Information Disclosure vulnerability. An unauthenticated attacker could leverage this vulnerability to obtain NTLMv2 credentials. Exploitation of this issue requires user interaction in that a victim must open a maliciously crafted Microsoft Office file, or visit an attacker controlled web page. '
    context3 = "An issue in Inspect Element Ltd Echo.ac v.5.2.1.0 allows a local attacker to gain privileges via a crafted command to the echo_driver.sys component. NOTE: the vendor's position is that the reported ability for user-mode applications to execute code as NT AUTHORITY\SYSTEM was deactivated by Microsoft itself."
    context4 = "A privilege escalation vulnerability was reported in Lenovo preloaded devices deployed using Microsoft AutoPilot under a standard user account due to incorrect default privileges. "
    context5 = "Grafana is an open-source platform for monitoring and observability. The Google Sheets data source plugin for Grafana, versions 0.9.0 to 1.2.2 are vulnerable to an information disclosure vulnerability. The plugin did not properly sanitize error messages, making it potentially expose the Google Sheet API-key that is configured for the data source. This vulnerability was fixed in version 1.2.2. "
    exploit = file_tostring("exploit.py")
    print(parse_cve(exploit))