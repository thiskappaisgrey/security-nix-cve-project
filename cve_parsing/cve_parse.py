# from a CVE version 5 definition, get the relevant version number + software
# see: https://github.com/CVEProject/cvelistV5/blob/main/cves/2023/38xxx/CVE-2023-38545.json#L25
# As you can see, a concrete example of the version is:
# "versions": [
#                     {
#                         "version": "8.4.0",
#                         "status": "affected",
#                         "lessThan": "8.4.0",
#                         "versionType": "semver"
#                     },
#                     {
#                         "version": "7.69.0",
#                         "status": "unaffected",
#                         "lessThan": "7.69.0",
#                         "versionType": "semver"
#                     }
#                 ]
#             }

# I want to get out a software + it's version number:
from dataclasses import dataclass
from typing import List
from pprint import pprint
import json
from collections import defaultdict
import argparse


@dataclass
class VersionInfo:
    # Ex: "curl"
    name: str
    version: List[str]


def get_version_info(data) -> List[VersionInfo]:
    pprint(data)
    version_map = defaultdict(set)
    affected = data['containers']['cna']['affected']

    for item in affected:
        name = item['product']
        versions = item['versions']
        for v in versions:
            if v["status"] != "affected":
                continue
            version_map[name].add(v["version"])

    info_list = []
    for names, versions in version_map.items():
        info = VersionInfo(name=names, version=sorted(list(versions)))
        info_list.append(info)
    info_list = sorted(info_list, key=lambda x: x.name)
    # pprint(info_list)
    return info_list


def parseCVE(file_name):
    with open(file_name, 'r') as file:
        data = json.load(file)

    return get_version_info(data)


if __name__ == '__main__':

    parser = argparse.ArgumentParser(description="Process a cve5 file.")

    parser.add_argument("filename", help="the file to be processed")
    # parser.add_argument("-v", "--verbose", action="store_true", help="increase output verbosity")

    args = parser.parse_args()

    # Use the arguments
    result = parseCVE(args.filename)
    print(result)