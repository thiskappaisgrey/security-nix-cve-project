# TODO: A nixos module to replicate:
# https://www.exploit-db.com/exploits/51734
{

  # Version: Up to (excluding) 2022-07-29T19-40-48Z - need this version
  # Vulnerable version: 2022-05-08T23-50-31Z - 
  inputs.nixpkgs.url =
    "github:NixOS/nixpkgs/34bfa9403e42eece93d1a3740e9d8a02fceafbca";

  # TODO: get a non-vulnerable version of minio and override it - see if the vulnerabilty was fixed
  # inputs.nixpkgs1.url = "nixpkgs/nixos-unstable";
  outputs = { self, nixpkgs, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs { inherit system; };

      python = pkgs.python3.withPackages (p: with p; [ requests minio ]);

      # python writer without checks!
      pythonWriter = pkgs.writers.makeScriptWriter {
        interpreter = "${python}/bin/python3";
      };
      exploit = pythonWriter "/bin/exploit" (builtins.readFile ./exploit.py);
    in {
      # packages."${system}".exploit = exploit;

      # Enable python
      devShells."${system}".default = pkgs.mkShell { packages = [ python ]; };
      nixosModules.module = { pkgs, ... }: {
        # systemState = "23.05";
        system.stateVersion = "23.05";
        boot.isContainer = true;
        # enable to verify version
        environment.systemPackages = [ pkgs.minio exploit python ];
        services.minio = {
          enable = true;
          # consoleAddress = ":9001";
          listenAddress = ":9000"; # this is already the default
          accessKey = "minioadmin";
          secretKey = "minioadmin";
        };
        # Open the port so you don't need to be in the container to curl this.
        networking.firewall.allowedTCPPorts = [ 9000 ];

      };

      nixosConfigurations.minio = nixpkgs.lib.nixosSystem {
        system = "x86_64-linux";
        modules = [ self.nixosModules.module ];
      };

      docsJSON = let
        release =
          import (builtins.toPath "${nixpkgs.outPath}/nixos/release.nix");
      in (release { }).options;
      #
      # nixosConfigurations.
    };

}
