{
  inputs = {
    nixpkgs.url = "nixpkgs/nixos-unstable";
    # TODO: Maybe I'll try this but for now, I'll just have nix build a container
    # microvm.url = "github:astro/microvm.nix";
    # microvm.inputs.nixpkgs.follows = "nixpkgs";
  };

  description = "Some flake";
  outputs = { self, nixpkgs, ... }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs { inherit system; };
      jsonformer =
        pkgs.python3Packages.callPackage ./nix/packages/jsonformer-init.nix { };
    in {
      pkgs = pkgs;

      lib = let
        writeNuShell = import ./nix/lib/writeNuShellBin {
          nushell = pkgs.nu;
          writeTextFile = pkgs.writeTextFile;
        };
      in { inherit writeNuShell; };
      # jsonformer = jsonformer1;
      devShells."${system}".default = pkgs.mkShell {
        buildInputs = with pkgs; [
          (python3.withPackages (p:
            with p; [
              transformers
              pytorch
              beautifulsoup4
              jsonformer
              requests
            ]))
          # deepsparse
          # lsp server for python
          nodePackages.pyright
          fd
          ripgrep
          exploitdb
          ast-grep
          nixfmt
          # go-exploitdb
          # go-cve-dictionary

        ];
      };
      #INFO: Static builds are not tested and CAN fail (i.e. I tried building fd / ripgrep statically and it failed)
      # These are built with musl instead of libc - so the result is a statically linked executable for binary analysis
      packagesBins = import ./nix/lib/create-dataset {
        inherit system;
        name = "something";
        nushell = pkgs.nushell;
        packages = with pkgs.pkgsStatic; [ curl ];
      };
    };
}

